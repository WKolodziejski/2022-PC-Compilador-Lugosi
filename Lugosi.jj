PARSER_BEGIN(Lugosi)

import java.io.*;
import java.util.*;
import java.io.FileWriter;

public class Lugosi {

    public static void main(String[] args) throws Exception {
        Lugosi parser = new Lugosi(new FileInputStream(args[0]));
        Tree tree = parser.Lugosi();
        compile(tree, args[0]);
    }

    public static void compile(Tree tree, String name) throws Exception {
        File file = new File(name);

        if (file.getName().contains("."))
            name = file.getName().substring(0, file.getName().indexOf("."));

        FileWriter writer = new FileWriter(name + ".java");
        writer.write("public class " + name + " {\n\n");

        //TODO add suporte para sobrecarga
        Map<String, Func> funcs = new HashMap<String, Func>();
        for (Func func : tree.funcs) {
            if (funcs.containsKey(func.id))
                throw new Exception(func.id + " already defined");

            funcs.put(func.id, func);
        }

        String main = parseScope(tree.main, funcs, "") + "\n";
        writer.write(main);
        System.out.print(main);

        for (Func func : tree.funcs) {
            String scope = parseScope(func, funcs, func.id) + "\n";
            writer.write(scope);
            System.out.print(scope);
        }

        writer.write("}");
        writer.close();
    }

    public static String parseScope(Main scope, Map<String, Func> funcs, String f) throws Exception {
        Map<String, Var> vars = new HashMap<String, Var>();
        String header;

        if (scope instanceof Func) {
            Func func = (Func) scope;
            StringBuilder builder = new StringBuilder();

            for (Arg arg : func.args) {
                if (vars.containsKey(arg.id))
                    throw new Exception(arg.id + " already defined in scope");

                vars.put(arg.id, arg);
                builder.append(parseArg(arg)).append(", ");
            }

            if (!func.args.isEmpty()) {
                builder.deleteCharAt(builder.length() - 1);
                builder.deleteCharAt(builder.length() - 1);
            }

            header = "public static " + parseType(func.type) + " " + func.id + "(" + builder + ") {\n";
        } else {
            header = "public static void main(String[] args) {\n";
        }

        StringBuilder builderVar = new StringBuilder();
        for (Var var : scope.vars) {
            String parsed = parseVar(var);

            if (vars.containsKey(var.id))
                throw new Exception(parsed + " already defined in scope");

            vars.put(var.id, var);
            builderVar.append(parsed).append(";\n");
        }

        header += builderVar;

        StringBuilder builderCom = new StringBuilder();
        for (Com com : scope.coms)
            builderCom.append(parseComFunc(com, vars, funcs, f));

        return header + builderCom + "}\n";
    }

    public static String parseVar(Var var) throws Exception {
        String type = parseType(var.type);

        if (type.equals("boolean"))
            return type + " " + var.id + " = " + "false";

        if (type.equals("int"))
            return type + " " + var.id + " = " + "0";

        if (type.equals("float"))
            return type + " " + var.id + " = " + "0f";

        throw new Exception("Type " + type + " not recognized");
    }

    public static String parseArg(Arg arg) throws Exception {
        String type = parseType(arg.type);

        if (type.equals("boolean") || type.equals("int") || type.equals("float"))
            return type + " " + arg.id;

        throw new Exception("Type " + type + " not recognized");
    }

    public static String parseType(String type) throws Exception {
        if (type.equals("bool"))
            type = "boolean";

        return type;
    }

    public static String parseCom(Com com, Map<String, Var> vars, Map<String, Func> funcs) throws Exception {
        return parseComFunc(com, vars, funcs, "");
    }

    public static String parseComFunc(Com com, Map<String, Var> vars, Map<String, Func> funcs, String func) throws Exception {
        if (com instanceof ComId) {
            String id = ((ComId) com).id;

            if (com instanceof Atrib) {
                Exp exp = ((Atrib) com).exp;
                String parsed = parseExp(exp, vars, funcs);

                if (exp instanceof Bool) {
                    if (!vars.get(id).type.equals("boolean"))
                        throw new Exception("Incompatible type of " + id + " with boolean");
                }

                if (exp instanceof Num) {
                    if (!vars.get(id).type.equals("int") && !vars.get(id).type.equals("float"))
                        throw new Exception("Incompatible type of " + id + " with numeric");
                }

                if (exp instanceof Op) {
                    Op op = (Op) exp;

                    if (op.op.equals("+") || op.op.equals("-") || op.op.equals("*") || op.op.equals("/")) {
                        if (!vars.get(id).type.equals("int") && !vars.get(id).type.equals("float"))
                            throw new Exception("Incompatible type of " + id + " with numeric");
                    }

                    if (op.op.equals("<") || op.op.equals(">") || op.op.equals("==") || op.op.equals("&&") || op.op.equals("||")) {
                        if (!vars.get(id).type.equals("bool"))
                            throw new Exception("Incompatible type of " + id + " with numeric");
                    }
                }

                if (exp instanceof Id) {
                    String v = ((Id) exp).id;

                    if (!vars.containsKey(v))
                        throw new Exception("Var " + v + " is undefined");

                    if (!vars.get(id).type.equals(vars.get(v).type))
                        throw new Exception("Incompatible type of " + id + " with " + v);
                }

                if (exp instanceof RetCall) {
                    String f = ((RetCall) exp).id;

                    if (!funcs.containsKey(f))
                        throw new Exception("Function " + f + " is undefined");

                    if (!vars.get(id).type.equals(funcs.get(f).type))
                        throw new Exception("Incompatible type of " + id + " with " + f);
                }

                return id + " = " + parsed + ";\n";
            }

            if (com instanceof VoidCall) {
                List<Exp> exps = ((VoidCall) com).exp;
                StringBuilder builder = new StringBuilder();

                String f = ((VoidCall) com).id;

                if (!funcs.containsKey(f))
                    throw new Exception("Function " + f + " is undefined");

                for (Exp exp : exps)
                    builder.append(parseExp(exp, vars, funcs)).append(", ");

                if (!exps.isEmpty()) {
                    builder.deleteCharAt(builder.length() - 1);
                    builder.deleteCharAt(builder.length() - 1);
                }

                return id + "(" + builder + ");\n";
            }
        }

        if (com instanceof BlockCom) {
            Exp exp = ((BlockCom) com).exp;
            List<Com> coms = ((BlockCom) com).coms;

            resolveExpBool(exp, vars, funcs);

            StringBuilder builder = new StringBuilder();

            for (Com c : coms)
                builder.append(parseCom(c, vars, funcs));

            if (com instanceof If)
                return "if (" + parseExp(exp, vars, funcs) + ") {\n" + builder + "}\n";

            if (com instanceof While)
                return "while (" + parseExp(exp, vars, funcs) + ") {\n" + builder + "}\n";

            if (com instanceof Do)
                return "do {\n" + builder + "\n} while (" + parseExp(exp, vars, funcs) + ")\n";
        }

        if (com instanceof SimpleCom) {
            Exp exp = ((SimpleCom) com).exp;
            String parsed = parseExp(exp, vars, funcs);

            if (com instanceof Return) {
                if (!funcs.containsKey(func))
                    throw new Exception("Function cannot have a return");

                if (funcs.get(func).type.equals("bool"))
                    resolveExpBool(exp, vars, funcs);

                if (funcs.get(func).type.equals("int") || funcs.get(func).type.equals("float"))
                    resolveExpNum(exp, vars, funcs);

                if (funcs.get(func).type.equals("void"))
                    throw new Exception("Void function cannot have a return");

                return "return " + parsed + ";\n";
            }

            if (com instanceof Print)
                return "System.out.println(" + parsed + ");\n";
        }

        throw new Exception("COM not parsed");
    }

    public static String parseExp(Exp exp, Map<String, Var> vars, Map<String, Func> funcs) throws Exception {
        //TODO converter para formato aceito pelo java
        if (exp instanceof Num)
            return ((Num) exp).num;

        if (exp instanceof Bool)
            return ((Bool) exp).bool;

        if (exp instanceof Id)
            return ((Id) exp).id;

        if (exp instanceof RetCall) {
            List<Exp> exps = ((RetCall) exp).exps;
            StringBuilder builder = new StringBuilder();

            String f = ((RetCall) exp).id;

            if (!funcs.containsKey(f))
                throw new Exception("Function " + f + " is undefined");

            if (exps.size() != funcs.get(f).args.size())
                throw new Exception("Wrong number of arguments in " + f + " call");

            for (Exp e : exps)
                builder.append(parseExp(e, vars, funcs)).append(", ");

            if (!exps.isEmpty()) {
                builder.deleteCharAt(builder.length() - 1);
                builder.deleteCharAt(builder.length() - 1);
            }

            return ((RetCall) exp).id + "(" + builder + ")";
        }

        if (exp instanceof Op) {
            Op op = (Op) exp;

            if (op.op.equals("+") || op.op.equals("-") || op.op.equals("*")
            || op.op.equals("/") || op.op.equals("<") || op.op.equals(">")) {
                resolveExpNum(op.exp1, vars, funcs);
                resolveExpNum(op.exp2, vars, funcs);
            }

            if (op.op.equals("&&") || op.op.equals("||")) {
                resolveExpBool(op.exp1, vars, funcs);
                resolveExpBool(op.exp2, vars, funcs);
            }

            return "(" + parseExp(op.exp1, vars, funcs) + " " + op.op + " " + parseExp(op.exp2, vars, funcs) + ")";
        }

        throw new Exception("EXP not parsed");
    }

    public static void resolveExpNum(Exp exp, Map<String, Var> vars, Map<String, Func> funcs) throws Exception {
        if (exp instanceof Bool)
            throw new Exception("Incompatible operands type " + exp);
        
        if (exp instanceof Op) {
            Op op = (Op) exp;
            
            if (op.op.equals("&&") || op.op.equals("||")) {
                resolveExpBool(op.exp1, vars, funcs);
                resolveExpBool(op.exp2, vars, funcs);
                //throw new Exception("Incompatible operands type " + exp);
            }
        }
        
        if (exp instanceof Id) {
            String v = ((Id) exp).id;
        
            if (!vars.containsKey(v))
                throw new Exception("Var " + v + " is undefined");
        
            if (!vars.get(v).type.equals("int") && !vars.get(v).type.equals("float"))
                throw new Exception("Incompatible type of " + v + " with numeric");
        }
        
        if (exp instanceof RetCall) {
            String f = ((RetCall) exp).id;
        
            if (!funcs.containsKey(f))
                throw new Exception("Function " + f + " is undefined");
        
            if (!funcs.get(f).type.equals("int") && !funcs.get(f).type.equals("float"))
                throw new Exception("Incompatible type of " + f + " with numeric");
        }
    }

    public static void resolveExpBool(Exp exp, Map<String, Var> vars, Map<String, Func> funcs) throws Exception {
        if (exp instanceof Num)
            throw new Exception("Incompatible operands type " + exp);

        if (exp instanceof Op) {
            Op op = (Op) exp;

            if (op.op.equals("+") || op.op.equals("-") || op.op.equals("*") || op.op.equals("/") || op.op.equals("<") || op.op.equals(">")) {
                resolveExpNum(op.exp1, vars, funcs);
                resolveExpNum(op.exp2, vars, funcs);
                //throw new Exception("Incompatible operands type " + exp);
            }
        }

        if (exp instanceof Id) {
            String v = ((Id) exp).id;

            if (!vars.containsKey(v))
                throw new Exception("Var " + v + " is undefined");

            if (!vars.get(v).type.equals("bool"))
                throw new Exception("Incompatible type of " + v + " with boolean");
        }

        if (exp instanceof RetCall) {
            String f = ((RetCall) exp).id;

            if (!funcs.containsKey(f))
                throw new Exception("Function " + f + " is undefined");

            if (!funcs.get(f).type.equals("bool"))
                throw new Exception("Incompatible type of " + f + " with boolean");
        }
    }
}

class Tree {
    Main main;
    List<Func> funcs;

    public Tree(Main main, List<Func> funcs) {
        this.main = main;
        this.funcs = funcs;
    }
}

class Main {
    List<Var> vars;
    List<Com> coms;

    public Main(List<Var> vars, List<Com> coms) {
        this.vars = vars;
        this.coms = coms;
    }
}

class Func extends Main {
    String type;
    String id;
    List<Arg> args;

    public Func(String type, String id, List<Arg> args, List<Var> vars, List<Com> coms) {
        super(vars, coms);
        this.type = type;
        this.id = id;
        this.args = args;
    }
}

class Var {
    String type;
    String id;

    public Var(String type, String id) {
        this.type = type;
        this.id = id;
    }
}

abstract class Com {}

abstract class Exp {}

class Arg extends Var {

    public Arg(String type, String id) {
        super(type, id);
    }
}

abstract class ComId extends Com {
    String id;
}

class Atrib extends ComId {
    Exp exp;

    public Atrib(Exp exp) {
        this.exp = exp;
    }
}

class VoidCall extends ComId {
    List<Exp> exp;

    public VoidCall(List<Exp> exp) {
        this.exp = exp;
    }
}

class Op extends Exp {
    String op;
    Exp exp1;
    Exp exp2;

    public Op(String op) {
        this.op = op;
    }

    @Override
    public String toString() {
        return exp1 + " " + op + " " + exp2;
    }
}

class Bool extends Exp {
    String bool;

    public Bool(String bool) {
        this.bool = bool;
    }

    @Override
    public String toString() {
        return bool;
    }
}

class Num extends Exp {
    String num;

    public Num(String num) {
        this.num = num;
    }

    @Override
    public String toString() {
        return num;
    }
}

class Id extends Exp {
    String id;

    public Id(String id) {
        this.id = id;
    }

    @Override
    public String toString() {
        return id;
    }
}

class RetCall extends Exp {
    String id;
    List<Exp> exps;

    public RetCall(String id, List<Exp> exps) {
        this.id = id;
        this.exps = exps;
    }

    @Override
    public String toString() {
        return id + "(" + exps + ")";
    }
}

abstract class BlockCom extends Com {
    Exp exp;
    List<Com> coms;

    public BlockCom(Exp exp, List<Com> coms) {
        this.exp = exp;
        this.coms = coms;
    }
}

abstract class SimpleCom extends Com {
    Exp exp;

    public SimpleCom(Exp exp) {
        this.exp = exp;
    }
}

class If extends BlockCom {
    public If(Exp exp, List<Com> coms) {
        super(exp, coms);
    }
}

class While extends BlockCom {
    public While(Exp exp, List<Com> coms) {
        super(exp, coms);
    }
}

class Do extends BlockCom {
    public Do(Exp exp, List<Com> coms) {
        super(exp, coms);
    }
}

class Return extends SimpleCom {
    public Return(Exp exp) {
        super(exp);
    }
}

class Print extends SimpleCom {
    public Print(Exp exp) {
        super(exp);
    }
}

PARSER_END(Lugosi)

SKIP : {
                    " "
    |               "\t"
    |               "\n"
    |               "\r"
}

TOKEN : {
      <MAIN:        "main">
    | <VAR:         "var">
    | <TIPO:        ("int" | "bool" | "float" | "void")>
    | <IF:          "if">
    | <WHILE:       "while">
    | <DO:          "do">
    | <RET:         "return">
    | <FUN:         "function">
    | <PRINT:       "print">
}

TOKEN : {
      <ACHAVES:     "{">
    | <FCHAVES:     "}">
    | <APARENTESES: "(">
    | <FPARENTESES: ")">
    | <PVIRGULA:    ";">
    | <VIRGULA:    ",">
}

TOKEN : {
      <ADD:         "+">
    | <SUB:         "-">
    | <MULT:        "*">
    | <DIV:         "/">
    | <AND:         "&&">
    | <OR:          "||">
    | <LESSTHAN:    "<">
    | <MORETHAN:    ">">
    | <EQUALS:      "==">
    | <ATRIB:       ":=">
}

TOKEN : {
      <NUM:         (["0"-"9"])+ ("."(["0"-"9"])+)? ("E" ("+"|"-")? (["0"-"9"])+)?>
    | <ID:          ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>
    | <BOOL:        ("true" | "false")>
}

Tree Lugosi():
{
    Main main;
    List<Func> funcs = new ArrayList<Func>();
}
{
    main = Main() (funcs = Func())? <EOF>

    {return new Tree(main, funcs);}
}

Main Main() :
{
    List<Var> vars;
    List<Com> coms;
}
{
    <MAIN> <ACHAVES> vars = VarDecl() coms = SeqComandos() <FCHAVES>

    {return new Main(vars, coms);}
}

List<Func> Func() :
{
    Token tipo;
    String id;
    List<Arg> args = new ArrayList<Arg>();
    List<Var> vars;
    List<Com> coms;
    List<Func> funcs = new ArrayList<Func>();
}
{
     (<FUN> tipo = <TIPO> id = TokenId() <APARENTESES> (args = ListaArg())? <FPARENTESES> <ACHAVES> vars = VarDecl() coms = SeqComandos() <FCHAVES>
     {funcs.add(new Func(tipo.image, id, args, vars, coms));})+

     {return funcs;}
}

List<Var> VarDecl():
{
    Token tipo;
    String id;
    List<Var> vars = new ArrayList<Var>();
}
{
    (<VAR> tipo = <TIPO> id = TokenId() <PVIRGULA> {vars.add(new Var(tipo.image, id));})*

    {return vars;}
}

String TokenId():
{
    Token id;
}
{
    (id = <ID>)

    {return id.image;}
}

String TokenNum():
{
    Token num;
}
{
    (num = <NUM>)

    {return num.image;}
}

List<Com> SeqComandos() :
{
    List<Com> coms = new ArrayList<Com>();
    Com com;
}
{
    (com = Comando() {coms.add(com);})*

    {return coms;}
}

Com Comando() :
{
    String id;
    Com com;
    Exp exp;
    List<Com> coms;
}
{
//      TokenId() <ATRIB> Exp() <PVIRGULA>
//    | TokenId() <APARENTESES> (ListaExp())? <FPARENTESES> <PVIRGULA>
    (id = TokenId() com = ComandoTokenId()                             {((ComId) com).id = id;}
    | <IF> <APARENTESES> exp = Exp() <FPARENTESES> <ACHAVES> coms = SeqComandos() <FCHAVES> <PVIRGULA>         {com = new If(exp, coms);}
    | <WHILE> <APARENTESES> exp = Exp() <FPARENTESES> <DO> <ACHAVES> coms = SeqComandos() <FCHAVES> <PVIRGULA> {com = new While(exp, coms);}
    | <DO> <ACHAVES> coms = SeqComandos() <FCHAVES> <WHILE> <APARENTESES> exp = Exp() <FPARENTESES> <PVIRGULA> {com = new Do(exp, coms);}
    | <RET> exp = Exp() <PVIRGULA>                                          {com = new Return(exp);}
    | <PRINT> <APARENTESES> exp = Exp() <FPARENTESES> <PVIRGULA>                                   {com = new Print(exp);})

    {return com;}
}

ComId ComandoTokenId() :
{
    ComId com;
    Exp exp;
    List<Exp> exps = new ArrayList<Exp>();
}
{
    (<ATRIB> exp = Exp() <PVIRGULA> {com = new Atrib(exp);}
    | <APARENTESES> (exps = ListaExp())? <FPARENTESES> <PVIRGULA> {com = new VoidCall(exps);})

    {return com;}
}

Exp Exp() :
{
    Op op;
    Exp exp;
    Exp exp1;
    Exp exp2;
}
{
    ( <APARENTESES> exp1 = Exp() op = Op() exp2 = Exp() <FPARENTESES> {op.exp1 = exp1; op.exp2 = exp2; exp = op;}
    | exp = Fator())

    {return exp;}
}

Exp Fator() :
{
    String num;
    String id;
    Token token;
    Exp exp;
    List<Exp> exps;
}
{
//      TokenId()
//    | TokenId() <APARENTESES> (ListaExp())? <FPARENTESES>
    ( id = TokenId() exps = FatorTokenId() {exp = (exps == null) ? new Id(id) : new RetCall(id, exps);}
    | num = TokenNum() {exp = new Num(num);}
    | token = <BOOL> {exp = new Bool(token.image);})

    {return exp;}
}

List<Exp> FatorTokenId() :
{
    List<Exp> exps = null;
}
{
    (<APARENTESES> (exps = ListaExp())? <FPARENTESES>)?

    {return exps;}
}

List<Exp> ListaExp() :
{
    List<Exp> exps = new ArrayList<Exp>();
    Exp exp;
}
{
//      Exp()
//    | ListaExp() <VIRGULA> Exp()
    exp = Exp() {exps.add(exp);}
    (<VIRGULA> exp = Exp() {exps.add(exp);})*

    {return exps;}
}

List<Arg> ListaArg() :
{
    Token tipo;
    String id;
    List<Arg> args = new ArrayList<Arg>();
}
{
//      <TIPO> TokenId()
//    | ListaArg() <VIRGULA> <TIPO> TokenId()
    tipo = <TIPO> id = TokenId() {args.add(new Arg(tipo.image, id));}
    (<VIRGULA> tipo = <TIPO> id = TokenId() {args.add(new Arg(tipo.image, id));})*

    {return args;}
}

Op Op() :
{
    Op op;
}
{
    ( <ADD>         {op = new Op("+");}
    | <SUB>         {op = new Op("-");}
    | <MULT>        {op = new Op("*");}
    | <DIV>         {op = new Op("/");}
    | <AND>         {op = new Op("&&");}
    | <OR>          {op = new Op("||");}
    | <LESSTHAN>    {op = new Op("<");}
    | <MORETHAN>    {op = new Op(">");}
    | <EQUALS>      {op = new Op("==");})

    {return op;}
}